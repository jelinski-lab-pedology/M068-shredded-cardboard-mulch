rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, inches, mm, round = 4))
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric)
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2))
View(temp_precip)
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2))
str(temp_precip)
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2)) %>%
dplyr::select('max_temp_C', 'min_temp_C', 'precip_in', 'date') %>%
mutate(avg_temp_C = (max_temp_C + min_temp_C)/2)
# ALERT: there's a weird quirk in the first and last days of the year, where they are part of the week from a different year. So that's worth checking, either to see if there's a better function or to just remove those weirdo dates from the calculation
temp_precip_wk <- temp_precip_day %>%
group_by(year, month, week) %>%
summarize(wk_precip_in = sum(precip_mm),
wk_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
wk_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
wk_avg_temp_C = (wk_avg_temp_max + wk_avg_temp_min) /2) %>%
ungroup()
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2)) %>%
dplyr::select('max_temp_C', 'min_temp_C', 'precip_in', 'date') %>%
mutate(avg_temp_C = (max_temp_C + min_temp_C)/2)
str(temp_precip)
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2)) %>%
dplyr::select('date', 'month', 'year', 'max_temp_C', 'min_temp_C', 'precip_in') %>%
mutate(avg_temp_C = (max_temp_C + min_temp_C)/2)
# ALERT: there's a weird quirk in the first and last days of the year, where they are part of the week from a different year. So that's worth checking, either to see if there's a better function or to just remove those weirdo dates from the calculation
temp_precip_wk <- temp_precip_day %>%
group_by(year, month, week) %>%
summarize(wk_precip_in = sum(precip_mm),
wk_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
wk_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
wk_avg_temp_C = (wk_avg_temp_max + wk_avg_temp_min) /2) %>%
ungroup()
str(temp_precip)
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2)) %>%
dplyr::select('date', 'year', 'month', 'week', 'max_temp_C', 'min_temp_C', 'precip_in') %>%
mutate(avg_temp_C = (max_temp_C + min_temp_C)/2)
# ALERT: there's a weird quirk in the first and last days of the year, where they are part of the week from a different year. So that's worth checking, either to see if there's a better function or to just remove those weirdo dates from the calculation
temp_precip_wk <- temp_precip_day %>%
group_by(year, month, week) %>%
summarize(wk_precip_in = sum(precip_mm),
wk_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
wk_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
wk_avg_temp_C = (wk_avg_temp_max + wk_avg_temp_min) /2) %>%
ungroup()
str(temp_precip)
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2)) %>%
dplyr::select('date', 'year', 'month', 'week', 'max_temp_C', 'min_temp_C', 'precip_mm') %>%
mutate(avg_temp_C = (max_temp_C + min_temp_C)/2)
# ALERT: there's a weird quirk in the first and last days of the year, where they are part of the week from a different year. So that's worth checking, either to see if there's a better function or to just remove those weirdo dates from the calculation
temp_precip_wk <- temp_precip_day %>%
group_by(year, month, week) %>%
summarize(wk_precip_in = sum(precip_mm),
wk_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
wk_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
wk_avg_temp_C = (wk_avg_temp_max + wk_avg_temp_min) /2) %>%
ungroup()
temp_precip_mon <- temp_precip_day %>%
group_by(year, month) %>%
summarize(mon_precip_in = sum(precip_mm),
mon_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
mon_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
mon_avg_temp_C = (mon_avg_temp_max + mon_avg_temp_min) / 2) %>%
ungroup()
temp_precip_season <- temp_precip_day %>%
subset(month > 4 & month < 11) %>%
group_by(year) %>%
summarize(season_precip_in = sum(precip_mm),
season_avg_temp_max = mean(max_temp_F, na.rm = TRUE),
season_avg_temp_min = mean(min_temp_F, na.rm = TRUE),
season_avg_temp_C = (season_avg_temp_max + season_avg_temp_min) / 2) %>%
ungroup()
str(temp_precip)
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2)) %>%
dplyr::select('date', 'year', 'month', 'week', 'max_temp_C', 'min_temp_C', 'precip_mm') %>%
mutate(avg_temp_C = (max_temp_C + min_temp_C)/2)
# ALERT: there's a weird quirk in the first and last days of the year, where they are part of the week from a different year. So that's worth checking, either to see if there's a better function or to just remove those weirdo dates from the calculation
temp_precip_wk <- temp_precip_day %>%
group_by(year, month, week) %>%
summarize(wk_precip_in = sum(precip_mm),
wk_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
wk_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
wk_avg_temp_C = (wk_avg_temp_max + wk_avg_temp_min) /2) %>%
ungroup()
temp_precip_mon <- temp_precip_day %>%
group_by(year, month) %>%
summarize(mon_precip_in = sum(precip_mm),
mon_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
mon_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
mon_avg_temp_C = (mon_avg_temp_max + mon_avg_temp_min) / 2) %>%
ungroup()
temp_precip_season <- temp_precip_day %>%
subset(month > 4 & month < 11) %>%
group_by(year) %>%
summarize(season_precip_in = sum(precip_mm),
season_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
season_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
season_avg_temp_C = (season_avg_temp_max + season_avg_temp_min) / 2) %>%
ungroup()
temp_precip_yr <- temp_precip_day %>%
group_by(year) %>%
summarize(yr_precip_in = sum(precip_mm),
yr_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
yr_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
yr_avg_temp_C = (yr_avg_temp_max + yr_avg_temp_min) / 2) %>%
ungroup()
View(temp_precip_day)
str(temp_precip)
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
subset(year == "2023" | year == "2024") %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2),
avg_temp_C = (max_temp_C + min_temp_C)/2) %>%
dplyr::select('date', 'year', 'month', 'week', 'max_temp_C', 'min_temp_C', 'avg_temp_C', 'precip_mm')
# ALERT: there's a weird quirk in the first and last days of the year, where they are part of the week from a different year. So that's worth checking, either to see if there's a better function or to just remove those weirdo dates from the calculation
temp_precip_wk <- temp_precip_day %>%
group_by(year, month, week) %>%
summarize(wk_precip_in = sum(precip_mm),
wk_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
wk_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
wk_avg_temp_C = (wk_avg_temp_max + wk_avg_temp_min) /2) %>%
ungroup()
temp_precip_mon <- temp_precip_day %>%
group_by(year, month) %>%
summarize(mon_precip_in = sum(precip_mm),
mon_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
mon_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
mon_avg_temp_C = (mon_avg_temp_max + mon_avg_temp_min) / 2) %>%
ungroup()
temp_precip_season <- temp_precip_day %>%
subset(month > 4 & month < 11) %>%
group_by(year) %>%
summarize(season_precip_in = sum(precip_mm),
season_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
season_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
season_avg_temp_C = (season_avg_temp_max + season_avg_temp_min) / 2) %>%
ungroup()
temp_precip_yr <- temp_precip_day %>%
group_by(year) %>%
summarize(yr_precip_in = sum(precip_mm),
yr_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
yr_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
yr_avg_temp_C = (yr_avg_temp_max + yr_avg_temp_min) / 2) %>%
ungroup()
View(temp_precip_day)
# Graphing the treatment average maximum daily temp perhaps shows the trends for bare soil a little more, but not so much that it's worth having an extra figure.
#What to do with the straw mulch in 2024?
# combine these figures with average daily air temperature. Also add note symbol for when mulch was applied, or make it show only after mulch is applied.
ggplot(data = subset(soil_temp_trt, year == "2023" &
month > 4 &
month < 11),
aes(x = date,
y = trt_avg,
color = treatment)) +
geom_line() +
theme_bw()
ggplot(data = subset(soil_temp_trt, year == "2024" &
month > 4 &
month < 11),
aes(x = date,
y = trt_avg,
color = treatment)) +
geom_line() +
theme_bw()
View(soil_temp_day)
# combine these figures with average daily air temperature. Also add note symbol for when mulch was applied, or make it show only after mulch is applied.
ggplot() +
geom_line(data = subset(soil_temp_trt, year == "2023" &
month > 4 &
month < 11),
aes(x = date,
y = trt_avg,
color = treatment)) +
geom_line(data = subset(temp_precip_day, year == "2023" &
month > 4 &
month < 11),
aes(x = date,
y = avg_temp_C)) %>%
theme_bw()
# combine these figures with average daily air temperature. Also add note symbol for when mulch was applied, or make it show only after mulch is applied.
ggplot() +
geom_line(data = subset(soil_temp_trt, year == "2023" &
month > 4 &
month < 11),
aes(x = date,
y = trt_avg,
color = treatment)) +
geom_line(data = subset(temp_precip_day, year == "2023" &
month > 4 &
month < 11),
aes(x = date,
y = avg_temp_C)) +
theme_bw()
View(soil_temp_trt)
# Graphing the treatment average maximum daily temp perhaps shows the trends for bare soil a little more, but not so much that it's worth having an extra figure.
#What to do with the straw mulch in 2024?
# combine these figures with average daily air temperature. Also add note symbol for when mulch was applied, or make it show only after mulch is applied.
ggplot() +
geom_line(data = subset(soil_temp_trt, year == "2023" &
month > 4 &
month < 11),
aes(x = date,
y = trt_avg,
color = treatment)) +
geom_line(data = subset(temp_precip_day, year == "2023" &
month > 4 &
month < 11),
aes(x = date,
y = avg_temp_C)) +
theme_bw()
ggplot() +
geom_line(data = subset(soil_temp_trt, year == "2024" &
month > 4 &
month < 11),
aes(x = date,
y = trt_avg,
color = treatment)) +
geom_line(data = subset(temp_precip_day, year == "2024" &
month > 4 &
month < 11),
aes(x = date,
y = avg_temp_C)) +
theme_bw()
# combine this with average daily air temp
ggplot() +
geom_line(data = subset(soil_temp_trt, study_yr == 1), aes(x = date, y = trt_avg, color = treatment)) +
geom_line(data = subset(temp_precip_day, (year == "2023" &
month > 4) | (year == "2024" & month < 5)),
aes(x = date, y = avg_temp_C))
# combine this with average daily air temp
ggplot() +
geom_line(data = subset(soil_temp_trt, study_yr == 1), aes(x = date, y = trt_avg, color = treatment)) +
geom_line(data = subset(temp_precip_day, (year == "2023" & month > 4) | (year == "2024" & month < 5)),
aes(x = date, y = avg_temp_C)) +
theme_bw()
ggplot() +
geom_line(data = subset(soil_temp_trt, study_yr == 2), aes(x = date, y = trt_avg, color = treatment)) +
geom_line(data = subset(temp_precip_day, (year == "2024" & month > 4) | (year == "2025" & month < 5)),
aes(x = date, y = avg_temp_C)) +
theme_bw()
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
subset(year == "2023" | year == "2024" | (year == "2025" & month < 5)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2),
avg_temp_C = (max_temp_C + min_temp_C)/2) %>%
dplyr::select('date', 'year', 'month', 'week', 'max_temp_C', 'min_temp_C', 'avg_temp_C', 'precip_mm')
# ALERT: there's a weird quirk in the first and last days of the year, where they are part of the week from a different year. So that's worth checking, either to see if there's a better function or to just remove those weirdo dates from the calculation
temp_precip_wk <- temp_precip_day %>%
group_by(year, month, week) %>%
summarize(wk_precip_in = sum(precip_mm),
wk_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
wk_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
wk_avg_temp_C = (wk_avg_temp_max + wk_avg_temp_min) /2) %>%
ungroup()
temp_precip_mon <- temp_precip_day %>%
group_by(year, month) %>%
summarize(mon_precip_in = sum(precip_mm),
mon_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
mon_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
mon_avg_temp_C = (mon_avg_temp_max + mon_avg_temp_min) / 2) %>%
ungroup()
temp_precip_season <- temp_precip_day %>%
subset(month > 4 & month < 11) %>%
group_by(year) %>%
summarize(season_precip_in = sum(precip_mm),
season_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
season_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
season_avg_temp_C = (season_avg_temp_max + season_avg_temp_min) / 2) %>%
ungroup()
temp_precip_yr <- temp_precip_day %>%
group_by(year) %>%
summarize(yr_precip_in = sum(precip_mm),
yr_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
yr_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
yr_avg_temp_C = (yr_avg_temp_max + yr_avg_temp_min) / 2) %>%
ungroup()
# combine this with average daily air temp
ggplot() +
geom_line(data = subset(soil_temp_trt, study_yr == 1), aes(x = date, y = trt_avg, color = treatment)) +
geom_line(data = subset(temp_precip_day, (year == "2023" & month > 4) | (year == "2024" & month < 5)),
aes(x = date, y = avg_temp_C)) +
theme_bw()
ggplot() +
geom_line(data = subset(soil_temp_trt, study_yr == 2), aes(x = date, y = trt_avg, color = treatment)) +
geom_line(data = subset(temp_precip_day, (year == "2024" & month > 4) | (year == "2025" & month < 5)),
aes(x = date, y = avg_temp_C)) +
theme_bw()
#check with Nic to see if changing trace precip to 0.001 in was appropriate
temp_precip_day <- temp_precip %>%
rename(max_temp_F = Maximum.Temperature.degrees..F.,
min_temp_F = Minimum.Temperature.degrees..F.,
precip_in = Precipitation..inches.,
date = Date) %>%
mutate(date = lubridate::as_date(date, format = "%Y-%m-%d"),
year = as.numeric(lubridate::year(date))) %>%
mutate(month = lubridate::month(date),
week = lubridate::isoweek(ymd(date)),
precip_in = ifelse(precip_in == "T", 0.001, precip_in)) %>%
subset(year == "2023" | year == "2024" | (year == "2025" & month < 6)) %>%
mutate_at(c('max_temp_F', 'min_temp_F','precip_in'), as.numeric) %>%
mutate(max_temp_C = fahrenheit.to.celsius(max_temp_F, round = 2),
min_temp_C = fahrenheit.to.celsius(min_temp_F, round = 2),
precip_mm = convert_precip(precip_in, old_metric = "inches", new_metric = "mm", round = 2),
avg_temp_C = (max_temp_C + min_temp_C)/2) %>%
dplyr::select('date', 'year', 'month', 'week', 'max_temp_C', 'min_temp_C', 'avg_temp_C', 'precip_mm')
# ALERT: there's a weird quirk in the first and last days of the year, where they are part of the week from a different year. So that's worth checking, either to see if there's a better function or to just remove those weirdo dates from the calculation
temp_precip_wk <- temp_precip_day %>%
group_by(year, month, week) %>%
summarize(wk_precip_in = sum(precip_mm),
wk_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
wk_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
wk_avg_temp_C = (wk_avg_temp_max + wk_avg_temp_min) /2) %>%
ungroup()
temp_precip_mon <- temp_precip_day %>%
group_by(year, month) %>%
summarize(mon_precip_in = sum(precip_mm),
mon_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
mon_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
mon_avg_temp_C = (mon_avg_temp_max + mon_avg_temp_min) / 2) %>%
ungroup()
temp_precip_season <- temp_precip_day %>%
subset(month > 4 & month < 11) %>%
group_by(year) %>%
summarize(season_precip_in = sum(precip_mm),
season_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
season_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
season_avg_temp_C = (season_avg_temp_max + season_avg_temp_min) / 2) %>%
ungroup()
temp_precip_yr <- temp_precip_day %>%
group_by(year) %>%
summarize(yr_precip_in = sum(precip_mm),
yr_avg_temp_max = mean(max_temp_C, na.rm = TRUE),
yr_avg_temp_min = mean(min_temp_C, na.rm = TRUE),
yr_avg_temp_C = (yr_avg_temp_max + yr_avg_temp_min) / 2) %>%
ungroup()
# combine this with average daily air temp
ggplot() +
geom_line(data = subset(soil_temp_trt, study_yr == 1), aes(x = date, y = trt_avg, color = treatment)) +
geom_line(data = subset(temp_precip_day, (year == "2023" & month > 4) | (year == "2024" & month < 5)),
aes(x = date, y = avg_temp_C)) +
theme_bw()
ggplot() +
geom_line(data = subset(soil_temp_trt, study_yr == 2), aes(x = date, y = trt_avg, color = treatment)) +
geom_line(data = subset(temp_precip_day, (year == "2024" & month > 4) | (year == "2025" & month < 5)),
aes(x = date, y = avg_temp_C)) +
theme_bw()
View(temp_precip_day)
View(temp_precip_mon)
